.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Silicon::Chip 3pm"
.TH Silicon::Chip 3pm "2023-10-25" "perl v5.34.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
Silicon::Chip \- Design a silicon chip by combining gates and sub chips.
.SH "Synopsis"
.IX Header "Synopsis"
.SH "Description"
.IX Header "Description"
Design a silicon chip by combining gates and sub chips.
.PP
Version 20231025.
.PP
The following sections describe the methods in each functional area of this
module.  For an alphabetic listing of all methods by name see Index.
.SH "Construct"
.IX Header "Construct"
Construct a representation of a digital circuit using standard gates.
.SS "newChip(%options)"
.IX Subsection "newChip(%options)"
Create a new chip
.PP
.Vb 2
\&     Parameter  Description
\&  1  %options   Options
.Ve
.PP
\&\fBExample:\fR
.PP
.Vb 1
\&  if (1)                                                                           Single AND gate
\&
\&   {my $c = newChip;  # XXXXXXX
\&
\&    $c\->gate("input",  "i1");
\&    $c\->gate("input",  "i2");
\&    $c\->gate("and",    "and1", {1=>q(i1), 2=>q(i2)});
\&    $c\->gate("output", "o", "and1");
\&    my $s = $c\->simulate({i1=>1, i2=>1});
\&    ok($s\->steps          == 2);
\&    ok($s\->values\->{and1} == 1);
\&   }
\&
\&  if (1)                                                                           Single AND gate
\&
\&   {my $c = newChip;  # XXXXXXX
\&
\&    $c\->input ("i1");
\&    $c\->input ("i2");
\&    $c\->and   ("and1", {1=>q(i1), 2=>q(i2)});
\&    $c\->output("o", "and1");
\&    my $s = $c\->simulate({i1=>1, i2=>1});
\&    ok($s\->steps          == 2);
\&    ok($s\->values\->{and1} == 1);
\&   }
.Ve
.ie n .SS "gate($chip, $type, $output, $inputs)"
.el .SS "gate($chip, \f(CW$type\fP, \f(CW$output\fP, \f(CW$inputs\fP)"
.IX Subsection "gate($chip, $type, $output, $inputs)"
A gate of some sort to be added to the chip.
.PP
.Vb 5
\&     Parameter  Description
\&  1  $chip      Chip
\&  2  $type      Gate type
\&  3  $output    Output name
\&  4  $inputs    Input names to output from another gate
.Ve
.PP
\&\fBExample:\fR
.PP
.Vb 1
\&  if (1)                                                                           Two AND gates driving an OR gate a tree  # XXXXXXX
\&
\&   {my $c = newChip;
\&
\&    $c\->gate("input",  "i11");  # XXXXXXX
\&
\&
\&    $c\->gate("input",  "i12");  # XXXXXXX
\&
\&
\&    $c\->gate("and",    "and1", {1=>q(i11),  2=>q(i12)});  # XXXXXXX
\&
\&
\&    $c\->gate("input",  "i21");  # XXXXXXX
\&
\&
\&    $c\->gate("input",  "i22");  # XXXXXXX
\&
\&
\&    $c\->gate("and",    "and2", {1=>q(i21),  2=>q(i22)});  # XXXXXXX
\&
\&
\&    $c\->gate("or",     "or",   {1=>q(and1), 2=>q(and2)});  # XXXXXXX
\&
\&
\&    $c\->gate("output", "o", "or");  # XXXXXXX
\&
\&    my $s = $c\->simulate({i11=>1, i12=>1, i21=>1, i22=>1});
\&    ok($s\->steps         == 3);
\&    ok($s\->values\->{or}  == 1);
\&       $s  = $c\->simulate({i11=>1, i12=>0, i21=>1, i22=>1});
\&    ok($s\->steps         == 3);
\&    ok($s\->values\->{or}  == 1);
\&       $s  = $c\->simulate({i11=>1, i12=>0, i21=>1, i22=>0});
\&    ok($s\->steps         == 3);
\&    ok($s\->values\->{o}   == 0);
\&   }
.Ve
.ie n .SS "install($chip, $subChip, $inputs, $outputs, %options)"
.el .SS "install($chip, \f(CW$subChip\fP, \f(CW$inputs\fP, \f(CW$outputs\fP, \f(CW%options\fP)"
.IX Subsection "install($chip, $subChip, $inputs, $outputs, %options)"
Install a chip within another chip specifying the connections between the inner and outer chip.  The same chip can be installed multiple times as each chip description is read only.
.PP
.Vb 6
\&     Parameter  Description
\&  1  $chip      Outer chip
\&  2  $subChip   Inner chip
\&  3  $inputs    Inputs of inner chip to to outputs of outer chip
\&  4  $outputs   Outputs of inner chip to inputs of outer chip
\&  5  %options   Options
.Ve
.PP
\&\fBExample:\fR
.PP
.Vb 5
\&  if (1)                                                                           Install one inside another chip, specifically one chip that performs NOT is installed three times sequentially to flip a value
\&   {my $i = newChip(name=>"inner");
\&       $i\->gate("input", "Ii");
\&       $i\->gate("not",   "In", "Ii");
\&       $i\->gate("output","Io", "In");
\&
\&    my $o = newChip(name=>"outer");
\&       $o\->gate("input",    "Oi1");
\&       $o\->gate("output",   "Oo1", "Oi1");
\&       $o\->gate("input",    "Oi2");
\&       $o\->gate("output",    "Oo", "Oi2");
\&
\&
\&    $o\->install($i, {Ii=>"Oo1"}, {Io=>"Oi2"});  # XXXXXXX
\&
\&    my $s = $o\->simulate({Oi1=>1}, dumpGatesOff=>"dump/not1", svg=>"svg/not1");
\&    is_deeply($s, {steps  => 2, values => { "(inner 1 In)" => 0, "Oi1" => 1, "Oo" => 0 }});
\&   }
.Ve
.SH "Visualize"
.IX Header "Visualize"
Visualize the chip in various ways.
.SH "Simulate"
.IX Header "Simulate"
Simulate the behavior of the chip.
.ie n .SS "simulate($chip, $inputs, %options)"
.el .SS "simulate($chip, \f(CW$inputs\fP, \f(CW%options\fP)"
.IX Subsection "simulate($chip, $inputs, %options)"
Simulate the set of gates until nothing changes.  This should be possible as feedback loops are banned.
.PP
.Vb 4
\&     Parameter  Description
\&  1  $chip      Chip
\&  2  $inputs    Hash of input names to values
\&  3  %options   Options
.Ve
.PP
\&\fBExample:\fR
.PP
.Vb 5
\&  if (1)
\&   {my $i = newChip(name=>"inner");
\&       $i\->gate("input", "Ii");
\&       $i\->gate("not",   "In", "Ii");
\&       $i\->gate("output","Io", "In");
\&
\&    my $o = newChip(name=>"outer");
\&       $o\->gate("input",    "Oi1");
\&       $o\->gate("output",   "Oo1", "Oi1");
\&       $o\->gate("input",    "Oi2");
\&       $o\->gate("output",   "Oo2", "Oi2");
\&       $o\->gate("input",    "Oi3");
\&       $o\->gate("output",   "Oo3", "Oi3");
\&       $o\->gate("input",    "Oi4");
\&       $o\->gate("output",    "Oo", "Oi4");
\&
\&    $o\->install($i, {Ii=>"Oo1"}, {Io=>"Oi2"});
\&    $o\->install($i, {Ii=>"Oo2"}, {Io=>"Oi3"});
\&    $o\->install($i, {Ii=>"Oo3"}, {Io=>"Oi4"});
\&
\&    my $s = $o\->simulate({Oi1=>1}, dumpGatesOff=>"dump/not3", svg=>"svg/not3");  # XXXXXXX
\&
\&    is_deeply($s\->values\->{Oo}, 0);
\&    is_deeply($s\->steps,        4);
\&   }
.Ve
.SH "Hash Definitions"
.IX Header "Hash Definitions"
.SS "Silicon::Chip Definition"
.IX Subsection "Silicon::Chip Definition"
Chip description
.PP
\fIOutput fields\fR
.IX Subsection "Output fields"
.PP
gates
.IX Subsection "gates"
.PP
Gates in chip
.PP
installs
.IX Subsection "installs"
.PP
Chips installed within the chip
.PP
name
.IX Subsection "name"
.PP
Name of chip
.SH "Private Methods"
.IX Header "Private Methods"
.ie n .SS "\s-1AUTOLOAD\s0($chip, @options)"
.el .SS "\s-1AUTOLOAD\s0($chip, \f(CW@options\fP)"
.IX Subsection "AUTOLOAD($chip, @options)"
Autoload by gate name to provide a more readable way to specify the gates on a chip.
.PP
.Vb 3
\&     Parameter  Description
\&  1  $chip      Chip
\&  2  @options   Options
.Ve
.SH "Index"
.IX Header "Index"
1 \s-1AUTOLOAD\s0 \- Autoload by gate name to provide a more readable way to specify the gates on a chip.
.PP
2 gate \- A gate of some sort to be added to the chip.
.PP
3 install \- Install a chip within another chip specifying the connections between the inner and outer chip.
.PP
4 newChip \- Create a new chip
.PP
5 simulate \- Simulate the set of gates until nothing changes.
.SH "Installation"
.IX Header "Installation"
This module is written in 100% Pure Perl and, thus, it is easy to read,
comprehend, use, modify and install via \fBcpan\fR:
.PP
.Vb 1
\&  sudo cpan install Silicon::Chip
.Ve
.SH "Author"
.IX Header "Author"
philiprbrenan@gmail.com <mailto:philiprbrenan@gmail.com>
.PP
<http://www.appaapps.com>
.SH "Copyright"
.IX Header "Copyright"
Copyright (c) 2016\-2023 Philip R Brenan.
.PP
This module is free software. It may be used, redistributed and/or modified
under the same terms as Perl itself.
